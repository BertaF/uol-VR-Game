//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/ForkliftControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ForkliftControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ForkliftControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ForkliftControls"",
    ""maps"": [
        {
            ""name"": ""Forklift"",
            ""id"": ""f4b6a5ee-b519-4ef2-9556-0cce3a041968"",
            ""actions"": [
                {
                    ""name"": ""RaiseFork"",
                    ""type"": ""PassThrough"",
                    ""id"": ""59bd6193-200e-49bc-8e69-31ea5c54b36d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LowerFork"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ad5c0af1-08ef-4649-ad6d-505ea1e36ad1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TiltForkIn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""42ee9a4b-ad65-42af-af3e-2b9f63b106c9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TiltForkOut"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d52af0ed-7967-4fd0-a7dd-b737296ae664"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""700bba26-1587-4926-b6b8-1031072a9a22"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseFork"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b9735ff-b255-41d0-ad5a-032c83b709c1"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LowerFork"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c26c0166-768e-4020-9663-3b20a95844a0"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltForkIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c846fafa-8185-438f-b869-d0048b53c0ee"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltForkOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_RaiseFork = m_Forklift.FindAction("RaiseFork", throwIfNotFound: true);
        m_Forklift_LowerFork = m_Forklift.FindAction("LowerFork", throwIfNotFound: true);
        m_Forklift_TiltForkIn = m_Forklift.FindAction("TiltForkIn", throwIfNotFound: true);
        m_Forklift_TiltForkOut = m_Forklift.FindAction("TiltForkOut", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_RaiseFork;
    private readonly InputAction m_Forklift_LowerFork;
    private readonly InputAction m_Forklift_TiltForkIn;
    private readonly InputAction m_Forklift_TiltForkOut;
    public struct ForkliftActions
    {
        private @ForkliftControls m_Wrapper;
        public ForkliftActions(@ForkliftControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RaiseFork => m_Wrapper.m_Forklift_RaiseFork;
        public InputAction @LowerFork => m_Wrapper.m_Forklift_LowerFork;
        public InputAction @TiltForkIn => m_Wrapper.m_Forklift_TiltForkIn;
        public InputAction @TiltForkOut => m_Wrapper.m_Forklift_TiltForkOut;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @RaiseFork.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseFork;
                @RaiseFork.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseFork;
                @RaiseFork.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseFork;
                @LowerFork.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerFork;
                @LowerFork.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerFork;
                @LowerFork.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerFork;
                @TiltForkIn.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkIn;
                @TiltForkIn.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkIn;
                @TiltForkIn.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkIn;
                @TiltForkOut.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkOut;
                @TiltForkOut.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkOut;
                @TiltForkOut.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTiltForkOut;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RaiseFork.started += instance.OnRaiseFork;
                @RaiseFork.performed += instance.OnRaiseFork;
                @RaiseFork.canceled += instance.OnRaiseFork;
                @LowerFork.started += instance.OnLowerFork;
                @LowerFork.performed += instance.OnLowerFork;
                @LowerFork.canceled += instance.OnLowerFork;
                @TiltForkIn.started += instance.OnTiltForkIn;
                @TiltForkIn.performed += instance.OnTiltForkIn;
                @TiltForkIn.canceled += instance.OnTiltForkIn;
                @TiltForkOut.started += instance.OnTiltForkOut;
                @TiltForkOut.performed += instance.OnTiltForkOut;
                @TiltForkOut.canceled += instance.OnTiltForkOut;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IForkliftActions
    {
        void OnRaiseFork(InputAction.CallbackContext context);
        void OnLowerFork(InputAction.CallbackContext context);
        void OnTiltForkIn(InputAction.CallbackContext context);
        void OnTiltForkOut(InputAction.CallbackContext context);
    }
}
